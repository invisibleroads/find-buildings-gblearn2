#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sat Sep 27 02:31:00 2008


# Import system modules
import sys
import itertools
import wx
import os
# Import custom modules
import script_process
from fp.lib import sample_store, image_store, classifier_cnn, store


# begin wxGlade: extracode
# end wxGlade


# Set
size_small = 100, 100
size_large = 400, 400


class MainFrame(wx.Frame):

    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.button_open = wx.Button(self, -1, "Open")
        self.slider = wx.Slider(self, -1, 0, 0, 10)
        self.checkbox_hasRoof = wx.CheckBox(self, -1, "Has Roof")
        self.label_location = wx.StaticText(self, -1, "")
        self.label_red = wx.StaticText(self, -1, "Red", style=wx.ALIGN_CENTRE)
        self.bitmap_red = wx.StaticBitmap(self, -1, wx.NullBitmap)
        self.label_green = wx.StaticText(self, -1, "Green", style=wx.ALIGN_CENTRE)
        self.bitmap_green = wx.StaticBitmap(self, -1, wx.NullBitmap)
        self.label_blue = wx.StaticText(self, -1, "Blue", style=wx.ALIGN_CENTRE)
        self.bitmap_blue = wx.StaticBitmap(self, -1, wx.NullBitmap)
        self.label_infrared = wx.StaticText(self, -1, "Infrared", style=wx.ALIGN_CENTRE)
        self.bitmap_infrared = wx.StaticBitmap(self, -1, wx.NullBitmap)
        self.label_panchromatic = wx.StaticText(self, -1, "Panchromatic", style=wx.ALIGN_CENTRE)
        self.bitmap_panchromatic = wx.StaticBitmap(self, -1, wx.NullBitmap)
        self.button_1 = wx.Button(self, -1, "Save")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onClickOpen, self.button_open)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.onScroll, self.slider)
        self.Bind(wx.EVT_CHECKBOX, self.onToggleHasRoof, self.checkbox_hasRoof)
        self.Bind(wx.EVT_BUTTON, self.onClickSave, self.button_1)
        # end wxGlade
        self.samples = []
        self.flag_changed = False

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("Sample Browser")
        self.SetSize((800, 600))
        self.checkbox_hasRoof.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 0, 0)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.button_open, 0, wx.EXPAND, 0)
        sizer_1.Add(self.slider, 0, wx.EXPAND, 0)
        sizer_7.Add(self.checkbox_hasRoof, 0, 0, 0)
        sizer_7.Add((20, 20), 0, 0, 0)
        sizer_7.Add(self.label_location, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_7, 0, wx.EXPAND, 0)
        sizer_2.Add(self.label_red, 0, wx.EXPAND, 0)
        sizer_2.Add(self.bitmap_red, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_3.Add(self.label_green, 0, wx.EXPAND, 0)
        sizer_3.Add(self.bitmap_green, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_5.Add(self.label_blue, 0, wx.EXPAND, 0)
        sizer_5.Add(self.bitmap_blue, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)
        sizer_8.Add(self.label_infrared, 0, wx.EXPAND, 0)
        sizer_8.Add(self.bitmap_infrared, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_4.Add(grid_sizer_1, 2, wx.EXPAND, 0)
        sizer_6.Add(self.label_panchromatic, 0, wx.EXPAND, 0)
        sizer_6.Add(self.bitmap_panchromatic, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_4.Add(sizer_6, 3, wx.EXPAND, 0)
        sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_1.Add(self.button_1, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def onClickOpen(self, event): # wxGlade: MainFrame.<event_handler>
        # Get file information
        fileTypes = 'Sample databases (*.db)|*.db', 'Lush samples (*Samples)|*Samples'
        dialog = wx.FileDialog(self, 'Open', style=wx.OPEN, wildcard='|'.join(fileTypes))
        if dialog.ShowModal() != wx.ID_OK: return
        filePath = dialog.GetPath()
        self.fileType = dialog.GetFilterIndex()
        dialog.Destroy()
        # If the user wants to open a database,
        if self.fileType == 0: 
            self.samples = sample_store.load(filePath).getSamples()
        # If the user wants to open Lush samples,
        else: 
            filePath = filePath.replace('Samples', '')
            self.samples = [(label, sample) for label, sample in itertools.izip(classifier_cnn.makeLabelGeneratorFromLushSamples(filePath), classifier_cnn.makeSampleGeneratorFromLushSamples(filePath))]
        # Set slider
        self.slider.SetRange(0, len(self.samples) - 1)
        # Show first sample
        self.refresh()

    def onScroll(self, event): # wxGlade: MainFrame.<event_handler>
        self.refresh()

    def onToggleHasRoof(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler 'onToggleHasRoof' not implemented!"
        event.Skip()

    def onClickSave(self, event): # wxGlade: MainFrame.<event_handler>
        # Get file information
        fileTypes = 'Sample databases (*.db)|*.db', 'Matlab matrices (*.mat)|*.mat'
        dialog = wx.FileDialog(self, 'Save', style=wx.SAVE, wildcard='|'.join(fileTypes))
        if dialog.ShowModal() != wx.ID_OK: return
        targetPath = dialog.GetPath()
        fileType = dialog.GetFilterIndex()
        dialog.Destroy()
        # If the user wants to save the data as a database, save it
        if fileType == 0: sample_store.save(self.samples, store.replaceFileExtension(targetPath, 'db'))
        # If the user wants to save the data in Matlab format, save it
        else: sample_store.saveForMatlab(self.samples, store.replaceFileExtension(targetPath, 'mat'))

    def refresh(self):        
        self.showSample(self.slider.GetValue())
        self.Fit()

    def showSample(self, index):
        # Get sample
        sample = self.samples[index]
        # If we have samples from a database
        if self.fileType == 0:
            hasRoof, geoLocation, multispectralWindow, panchromaticWindow = sample
            # Display
            self.checkbox_hasRoof.SetValue(hasRoof)
            self.label_location.SetLabel('%s, %s' % geoLocation)
            # Display multispectral images
            if multispectralWindow:
                label_red = 'Red (%dx%d pixels)' % (multispectralWindow.width, multispectralWindow.height)
                red, green, blue, infrared = multispectralWindow.getImages_pylab(*size_small)
                setBitmapFromPIL(self.bitmap_red, red)
                setBitmapFromPIL(self.bitmap_green, green)
                setBitmapFromPIL(self.bitmap_blue, blue)
                setBitmapFromPIL(self.bitmap_infrared, infrared)
            else:
                label_red = 'Red'
                self.bitmap_red.SetBitmap(wx.EmptyImage(0,0).ConvertToBitmap())
                self.bitmap_green.SetBitmap(wx.EmptyImage(0,0).ConvertToBitmap())
                self.bitmap_blue.SetBitmap(wx.EmptyImage(0,0).ConvertToBitmap())
                self.bitmap_infrared.SetBitmap(wx.EmptyImage(0,0).ConvertToBitmap())
                print 'Empty multispectral'
            # Display panchromatic image
            if panchromaticWindow:
                label_panchromatic = 'Panchromatic (%dx%d pixels)' % (panchromaticWindow.width, panchromaticWindow.height)
                panchromatic = panchromaticWindow.getImages_pylab(*size_large)[0]
                setBitmapFromPIL(self.bitmap_panchromatic, panchromatic)
            else: 
                label_panchromatic = 'Panchromatic'
                self.bitmap_panchromatic.SetBitmap(wx.EmptyImage(0,0).ConvertToBitmap())
                print 'Empty panchromatic'
        # Otherwise,
        else:
            # Expand
            lushLabel, lushSample = sample
            # Set label
            self.checkbox_hasRoof.SetValue(lushLabel)
            self.label_location.SetLabel('')
            # Set multispectral
            red, green, blue, infrared = image_store.getImages_pylab('imshow', lushSample[:4], *size_small) 
            setBitmapFromPIL(self.bitmap_red, red)
            setBitmapFromPIL(self.bitmap_green, green)
            setBitmapFromPIL(self.bitmap_blue, blue)
            setBitmapFromPIL(self.bitmap_infrared, infrared)
            # Set panchromatic
            panchromatic = image_store.getImages_pylab('imshow', [lushSample[4]], *size_large)[0]
            setBitmapFromPIL(self.bitmap_panchromatic, panchromatic)

# end of class MainFrame


def setBitmapFromPIL(bitmap, pilImage):
    width, height = pilImage.size
    wxImage = wx.EmptyImage(width, height)
    wxImage.SetData(pilImage.convert('RGB').tostring())
    bitmap.SetBitmap(wxImage.ConvertToBitmap())


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    mainFrame = MainFrame(None, -1, "")
    app.SetTopWindow(mainFrame)
    mainFrame.Show()
    app.MainLoop()
