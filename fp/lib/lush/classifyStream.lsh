; Load network
(defvar basePath (nth 1 argv))
(defvar networkPath (nth 2 argv))

; Add basePath
(addpath basePath)
; Load network
(load "net-spectral")
(reading networkPath (defvar thenet (bread))) 
; Define
(defvar windowMatrix)
(defvar windowBandCount)
(defvar windowHeight)
(defvar windowWidth)
(defvar output)
(defvar desired)
(defvar energy)
(de classify (in)
    (let* ((input (new idx3-ddstate windowBandCount windowHeight windowWidth)) (inputx :input:x))
        (idx-copy in inputx)
        (==> thenet fprop input output desired energy)))
; While we have standard input,
(reading "$stdin" 
    (while (<> (skip-char "\n\r\f") "\e")
        ; Get windowMatrix
        (setq windowMatrix (read))
        (setq windowBandCount (idx-dim windowMatrix -3))
        (setq windowWidth (idx-dim windowMatrix -1))
        (setq windowHeight (idx-dim windowMatrix -2))
        ; Define
        (setq output (new class-state 2))
        (setq desired (int-matrix))
        (setq energy (new idx0-ddstate)) (:energy:dx 1.0) (:energy:ddx 0.0)
        ; Show
        (classify windowMatrix)
        (printf "%f %f\n" :output:output-class :output:confidence)
        (flush)))

; Return
(exit 1)
